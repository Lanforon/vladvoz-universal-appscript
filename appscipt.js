/***** –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø *****/


const ALLOWED_EMAILS = ['work@vladvoz.com']; // –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –î–ï–ô–°–¢–í–£–Æ–©–ò–ô EMAIL

const REGISTRY_FILE_ID = '1TEksg-gFc5rgPAcgUC7aOrVsJKhCrw4-UPUTSqxVaF8'; 
const REG_SHEET = 'REGISTRY';
const START_ROW = 2; // –¥–ª—è —Ä–µ–µ—Å—Ç—Ä–∞

const TARGET_FOLDER_ID = '14mUE3P63c79GqMHgWDy4GrKkcf13Ut7c'; // TOO 

// –°—Å—ã–ª–∫–∏ –≤ REGISTRY
const REG_MASTER_FACTORY_CELL = 'B1';
const REG_MASTER_NOFACT_CELL  = 'D1';
const REG_STYLE_MASTER_CELL   = 'F1';

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
const COLS = {
  fio: 1,        // A - –§–ò–û
  order: 2,      // B - ID –ì–µ—Ç–∫—É—Ä—Å
  // C - –ü—É—Å—Ç–æ
  devUrl: 4,     // D - –°—Å—ã–ª–∫–∞ DEV
  studentUrl: 5, // E - –°—Å—ã–ª–∫–∞ STUDENT
  devMode: 6,    // F - –°—Ç–∞—Ç—É—Å ('–§–∞–±—Ä–∏–∫–∞' / '–ù–µ –§–∞–±—Ä–∏–∫–∞')
  aud1: 7,       // G - –ê—É–¥–∏—Ç–æ—Ä–∏—è 1
  exp1: 8,       // H - –≠–∫—Å–ø–µ—Ä—Ç 1
  aud2: 9,       // I - –ê—É–¥–∏—Ç–æ—Ä–∏—è 2
  exp2: 10,      // J - –≠–∫—Å–ø–µ—Ä—Ç 2
  aud3: 11,      // K - –ê—É–¥–∏—Ç–æ—Ä–∏—è 3
  exp3: 12       // L - –≠–∫—Å–ø–µ—Ä—Ç 3
};

const MARK_SELECT  = '>';
const MARK_FACTORY = '–§–ê–ë–†–ò–ö–ê';
const FORMULA_MARKER = '@@=';
const FORMULA_MARKER_LENGTH = FORMULA_MARKER.length;

const COL_A=1, COL_B=2, COL_C=3, COL_D=4, COL_E=5, COL_F=6, COL_G=7, COL_H=8, COL_I=9;

const SLEEP_MS = 1500; // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–ª–µ—Å—É—Ñ–ª—ë—Ä–∞


/***** –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø *****/










/***** === –ú–ï–ù–Æ === *****/
function onOpen() {
  const me = Session.getEffectiveUser().getEmail();
  if (!ALLOWED_EMAILS.includes(me)) return;

  SpreadsheetApp.getUi()
    .createMenu('–£—Ç–∏–ª–∏—Ç—ã')
    .addItem('–§–æ—Ä–º—É–ª—ã ‚áÑ –¢–µ–∫—Å—Ç', 'toggleFormulasOnSelection')
    .addSeparator()
    .addItem('1. –§–ê–ë–†–ò–ö–ê ‚Äî –°–æ–∑–¥–∞—Ç—å DEV', 'menuDevelopFactory')
    .addItem('1. –ù–ï –§–ê–ë–†–ò–ö–ê ‚Äî –°–æ–∑–¥–∞—Ç—å DEV', 'menuDevelopNoFactory')
    .addItem('1. –û–¢–î–ê–¢–¨ –£–ß–ï–ù–ò–ö–£ ‚Äî –°–æ–∑–¥–∞—Ç—å STUD', 'menuDeliverToStudent_AutoContext')
    .addSeparator()
    .addItem("1. –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤–≤ STUDENT<>ADMIN", "pasteSelectedValues_Bidirectional")
    .addItem("1. –†–∞–∑–¥–µ–ª–∏—Ç—å –Ø—á–µ–π–∫—É –≤–Ω–∏–∑ –ø–æ –ù–æ–º–µ—Ä–∞–º", "explodeNumberedListToRows")
    .addSeparator()
    .addItem('2, –†–ê–°–ö–†–´–¢–¨ –°–ú–´–°–õ–´ –≤ DEV', 'menuExpandSurgically_Final')
    .addItem('2. –û–¢–î–ê–¢–¨ –°–ú–´–°–õ–´ –≤ STUDENT', 'menuDeliverExpanded_Final')
    .addSeparator()
    .addItem('5. –û–¢–î–ê–¢–¨ –¢–ï–õ–ï–°–£–§–õ–ï–†', 'menuTeleprompter_InPlace')
    .addSeparator()
    .addItem('üîÑ –î–æ–±–∞–≤–∏—Ç—å IF –∫ GPT', 'f1') 
    .addToUi();
}

/***** –î–æ–±–∞–≤–∏–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è gpt —Ñ–æ—Ä–º—É–ª (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ–ø–µ—Ä—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ) *****/

async function menuExpandSurgically_Final() {
  try {
    const { devId, studentId } = resolveDevStudentByContext_();
    
    const ssStud = SpreadsheetApp.openById(studentId);
    const shStud = ssStud.getActiveSheet();
    const sheetName = shStud.getName();
    
    const ssDev = SpreadsheetApp.openById(devId);
    const shDev = ssDev.getSheetByName(sheetName) || ssDev.insertSheet(sheetName);

    const groups = collectSelectedRows_WithParsedLists_(shStud);
    if (!groups.length) {
      SpreadsheetApp.getUi().alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –º–∞—Ä–∫–µ—Ä–æ–º "> –û–¢–ë–ï–†–ò–¢–ï" –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º –ª–∏—Å—Ç–µ.');
      return;
    }

    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –≤ DEV
    await unfoldFormulasInColumnsAsync_(devId, [COL_E, COL_F, COL_G, COL_H]);
    SpreadsheetApp.flush();

    groups.sort((a, b) => b.rowIndex - a.rowIndex);

    const promises = groups.map(async (g) => {
      const r0 = g.rowIndex;
      const { k, B, C, D } = g.meta;
      if (!k || k < 1) return;

      // --- –®–∞–≥ 1: –†–∞–±–æ—Ç–∞ –≤ STUDENT ---
      if (k > 1) {
        shStud.insertRowsAfter(r0, k - 1);
        copyRowFormat_(shStud, r0, r0 + 1, k - 1);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const sourceFormulas = shStud.getRange(r0, 1, 1, shStud.getLastColumn()).getFormulas()[0];
        for (let i = 1; i < k; i++) {
          const targetRange = shStud.getRange(r0 + i, 1, 1, sourceFormulas.length);
          const formulasToSet = sourceFormulas.map(formula => 
            formula ? adjustCellReferences_(formula, i) : ''
          );
          targetRange.setFormulas([formulasToSet]);
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å—Ç—Ä–æ–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–æ–º ">" - –∑–∞–ø–æ–ª–Ω—è–µ–º B-D –¥–∞–Ω–Ω—ã–º–∏
      if (g.hasSelectMarker) {
        const blockData = [];
        for(let i = 0; i < k; i++) {
          const bVal = B[i] !== undefined ? B[i] : (B.length === 1 ? B[0] : '');
          const cVal = C[i] !== undefined ? C[i] : (C.length === 1 ? C[0] : '');
          const dVal = D[i] !== undefined ? D[i] : (D.length === 1 ? D[0] : '');
          blockData.push([bVal, cVal, dVal]);
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –≤ B-D
        if (!isRowGrouped_(shStud, r0)) {
          shStud.getRange(r0, COL_B, k, 3).setValues(blockData);
        }
      }
      SpreadsheetApp.flush();

      // --- –®–∞–≥ 2: –†–∞–±–æ—Ç–∞ –≤ DEV ---
      if (k > 1) {
        shDev.insertRowsAfter(r0, k - 1);
        
        // –°–ù–ê–ß–ê–õ–ê –∫–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ DEV –≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const sourceDevFormulas = shDev.getRange(r0, 1, 1, shDev.getLastColumn()).getFormulas()[0];
        for (let i = 1; i < k; i++) {
          const targetRange = shDev.getRange(r0 + i, 1, 1, sourceDevFormulas.length);
          const formulasToSet = sourceDevFormulas.map(formula => 
            formula ? adjustCellReferences_(formula, i) : ''
          );
          targetRange.setFormulas([formulasToSet]);
        }
      }

      // –¢–µ–ø–µ—Ä—å –∫–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ó–ù–ê–ß–ï–ù–ò–Ø –∏–∑ STUDENT –≤ DEV
      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ STUDENT
      const studValues = shStud.getRange(r0, COL_B, k, 18).getValues();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏–∑ DEV —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
      const devFormulas = shDev.getRange(r0, COL_B, k, 18).getFormulas();
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ - —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–º –≥–¥–µ –Ω–µ—Ç —Ñ–æ—Ä–º—É–ª
      const valuesToSet = studValues.map((row, rowIndex) => 
        row.map((value, colIndex) => 
          // –ï—Å–ª–∏ –≤ DEV –µ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º null (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º), –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ STUDENT
          devFormulas[rowIndex][colIndex] && devFormulas[rowIndex][colIndex].startsWith('=') ? null : value
        )
      );

      if (!isRowGrouped_(shDev, r0)) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setValues —Å null —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å —è—á–µ–π–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
        const range = shDev.getRange(r0, COL_B, k, 18);
        const currentValues = range.getValues();
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è: –≥–¥–µ null - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –Ω–æ–≤–æ–µ
        const finalValues = currentValues.map((currentRow, rowIndex) => 
          currentRow.map((currentValue, colIndex) => 
            valuesToSet[rowIndex][colIndex] === null ? currentValue : valuesToSet[rowIndex][colIndex]
          )
        );
        
        range.setValues(finalValues);
      }

      return { row: r0, count: k, hasSelectMarker: g.hasSelectMarker };
    });

    const results = await Promise.all(promises);
    
    const expandedCount = results.filter(r => r.hasSelectMarker).length;
    const copiedCount = results.length - expandedCount;
    
    SpreadsheetApp.getUi().alert(`‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} —Å—Ç—Ä–æ–∫:\n- –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —Å–ø–∏—Å–∫–æ–≤: ${expandedCount}\n- –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –µ—Å—Ç—å: ${copiedCount}\n–§–æ—Ä–º—É–ª—ã –≤ DEV —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);

  } catch (e) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ [3. –†–∞—Å–∫—Ä—ã—Ç—å —Å–º—ã—Å–ª—ã]: ' + (e.stack || e.message || e));
  }
}

/***** === –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—É–ª –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö ===*****/
async function unfoldFormulasInColumnsAsync_(fileId, colIndexes) {
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ ID–≤
  const ss = SpreadsheetApp.openById(fileId);
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
  const sheets = ss.getSheets();
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
  const sheetPromises = sheets.map(async (sh) => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ª–∏—Å—Ç–µ
    const lastRow = sh.getLastRow();
    // –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (lastRow < 1) return;

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ö–ê–ñ–î–û–ì–û –°–¢–û–õ–ë–¶–ê –≤ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
    const columnPromises = colIndexes.map(async (col) => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≤—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      const range = sh.getRange(1, col, lastRow, 1);
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–∞—Ö)
      const values = range.getDisplayValues();
      // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      let changed = false;
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ —Å—Ç–æ–ª–±—Ü–µ
      for (let r = 0; r < values.length; r++) {
        const txt = values[r][0] || '';
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞—Ä–∫–µ—Ä–∞ —Ñ–æ—Ä–º—É–ª—ã "@@="
        if (txt.startsWith(FORMULA_MARKER)) {
          // –ó–∞–º–µ–Ω—è–µ–º "@@=FORMULA" –Ω–∞ "=FORMULA" - –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
          values[r][0] = '=' + txt.substring(FORMULA_MARKER_LENGTH);
          changed = true;
        }
      }
      
      // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ
      if (changed) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —è—á–µ–π–∫–∏
        // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è
        range.setFormulas(values);
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await Utilities.sleep(100);
      }
    });
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–°–ï–• —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ —ç—Ç–æ–º –ª–∏—Å—Ç–µ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
    // –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã (E, F, G, H) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
    await Promise.all(columnPromises);
  });
  
  // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–°–ï–• –ª–∏—Å—Ç–æ–≤ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û
  await Promise.all(sheetPromises);
}

/***** === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º ===*****/
async function unfoldFormulasInColumnsAggressive_(fileId, colIndexes) {
  const ss = SpreadsheetApp.openById(fileId);
  const sheets = ss.getSheets();
  
  // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
  const allPromises = [];
  
  sheets.forEach(sh => {
    const lastRow = sh.getLastRow();
    if (lastRow < 1) return;

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–∏—Å
    colIndexes.forEach(col => {
      const promise = new Promise((resolve) => {
        try {
          const range = sh.getRange(1, col, lastRow, 1);
          const values = range.getDisplayValues();
          let changed = false;
          
          for (let r = 0; r < values.length; r++) {
            const txt = values[r][0] || '';
            if (txt.startsWith(FORMULA_MARKER)) {
              values[r][0] = '=' + txt.substring(FORMULA_MARKER_LENGTH);
              changed = true;
            }
          }
          
          if (changed) {
            range.setFormulas(values);
          }
          resolve(`Column ${col} processed`);
        } catch (e) {
          resolve(`Column ${col} error: ${e.message}`);
        }
      });
      
      allPromises.push(promise);
    });
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
  await Promise.all(allPromises);
}

/***** === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤ ===*****/
function menuExpandSurgically_Parallel() {
  try {
    const { devId, studentId } = resolveDevStudentByContext_();
    
    const ssStud = SpreadsheetApp.openById(studentId);
    const shStud = ssStud.getActiveSheet();
    const sheetName = shStud.getName();
    
    const ssDev = SpreadsheetApp.openById(devId);
    const shDev = ssDev.getSheetByName(sheetName) || ssDev.insertSheet(sheetName);

    const groups = collectSelectedRows_WithParsedLists_(shStud);
    if (!groups.length) {
      SpreadsheetApp.getUi().alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –º–∞—Ä–∫–µ—Ä–æ–º "> –û–¢–ë–ï–†–ò–¢–ï" –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º –ª–∏—Å—Ç–µ.');
      return;
    }

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
    const formulaColumns = [COL_E, COL_F, COL_G, COL_H];
    const unfoldPromises = formulaColumns.map(col => {
      return new Promise((resolve) => {
        try {
          unfoldSingleColumnFormulas_(devId, col);
          resolve(`Column ${col} done`);
        } catch (e) {
          resolve(`Column ${col} error: ${e.message}`);
        }
      });
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª
    Promise.all(unfoldPromises).then(() => {
      SpreadsheetApp.flush();
      
      groups.sort((a, b) => b.rowIndex - a.rowIndex);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–æ–∫
      groups.forEach(g => {
        const r0 = g.rowIndex;
        const { k, B, C, D } = g.meta;
        if (!k || k < 1) return;

        // –†–∞–±–æ—Ç–∞ —Å–æ STUDENT
        if (k > 1) {
          shStud.insertRowsAfter(r0, k - 1);
          copyRowFormat_(shStud, r0, r0 + 1, k - 1);
        }
        
        const blockData = [];
        for(let i=0; i<k; i++) {
          const bVal = B[i] !== undefined ? B[i] : (B.length === 1 ? B[0] : '');
          const cVal = C[i] !== undefined ? C[i] : (C.length === 1 ? C[0] : '');
          const dVal = D[i] !== undefined ? D[i] : (D.length === 1 ? D[0] : '');
          blockData.push([bVal, cVal, dVal]);
        }
        shStud.getRange(r0, COL_B, k, 3).setValues(blockData);
        SpreadsheetApp.flush();

        // –†–∞–±–æ—Ç–∞ —Å DEV
        if (k > 1) {
          shDev.insertRowsAfter(r0, k - 1);
        }
        
        const valuesBlockBCD = shStud.getRange(r0, COL_B, k, 3).getValues();
        shDev.getRange(r0, COL_B, k, 3).setValues(valuesBlockBCD);
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º—É–ª –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
        const formulaPromises = formulaColumns.map((col, index) => {
          return new Promise((resolve) => {
            try {
              const templateFormula = shDev.getRange(r0, col, 1, 1).getFormulas()[0][0];
              const newFormulas = [];
              for (let i = 0; i < k; i++) {
                const newFormula = adjustCellReferences_(templateFormula, i);
                newFormulas.push([newFormula]);
              }
              shDev.getRange(r0, col, k, 1).setFormulas(newFormulas);
              resolve(`Column ${col} formulas set`);
            } catch (e) {
              resolve(`Column ${col} error: ${e.message}`);
            }
          });
        });
        
        Promise.all(formulaPromises).then(() => {
          console.log(`Formulas set for row ${r0}`);
        });
      });

      SpreadsheetApp.getUi().alert('‚úÖ –ì–æ—Ç–æ–≤–æ! –°–º—ã—Å–ª—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ DEV (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è).');
      
    }).catch(error => {
      SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º—É–ª: ' + error);
    });

  } catch (e) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ [3. –†–∞—Å–∫—Ä—ã—Ç—å —Å–º—ã—Å–ª—ã]: ' + (e.stack || e.message || e));
  }
}

/***** === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ ===*****/
function unfoldSingleColumnFormulas_(fileId, colIndex) {
  const ss = SpreadsheetApp.openById(fileId);
  ss.getSheets().forEach(sh => {
    const lastRow = sh.getLastRow();
    if (lastRow < 1) return;

    const range = sh.getRange(1, colIndex, lastRow, 1);
    const values = range.getDisplayValues();
    let changed = false;
    
    for (let r = 0; r < values.length; r++) {
      const txt = values[r][0] || '';
      if (txt.startsWith(FORMULA_MARKER)) {
        values[r][0] = '=' + txt.substring(FORMULA_MARKER_LENGTH);
        changed = true;
      }
    }
    
    if (changed) {
      range.setFormulas(values);
    }
  });
}


/***** === 2. DEV ‚Üí STUDENT (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===*****/
function menuDeliverToStudent_AutoContext() {
  try {
    const { sheet, row } = resolveRegistryRowContext_();
    let devUrl = String(sheet.getRange(row, COLS.devUrl).getValue() || '').trim();
    const devId = devUrl ? fileIdFromUrl_(devUrl) : SpreadsheetApp.getActive().getId();
    if (!devId) throw new Error('–ù–µ—Ç DEV.');
    const order = String(sheet.getRange(row, COLS.order).getValue()||'').trim();
    if (!order) throw new Error('ID –∑–∞–∫–∞–∑–∞ –ø—É—Å—Ç.');
    let studUrlExisting = String(sheet.getRange(row, COLS.studentUrl).getValue() || '').trim();
    let studId;
    if (studUrlExisting) {
      studId = fileIdFromUrl_(studUrlExisting);
      try { DriveApp.getFileById(studId).getId(); }
      catch (e) { studId = null; }
    }
    if (!studId) {
      const styleUrl = String(sheet.getRange(REG_STYLE_MASTER_CELL).getValue()||'').trim();
      if (!styleUrl) throw new Error(`–í REGISTRY!${REG_STYLE_MASTER_CELL} –Ω–µ—Ç STYLE MASTER`);
      const styleId = fileIdFromUrl_(styleUrl);
      const folder = DriveApp.getFolderById(TARGET_FOLDER_ID);
      const studFile = DriveApp.getFileById(styleId).makeCopy(`STUDENT ‚Äî ${order}`, folder);
      studId = studFile.getId();
      DriveApp.getFileById(studId).setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.EDIT);
      const studUrl = `https://docs.google.com/spreadsheets/d/${studId}/edit`;
      sheet.getRange(row, COLS.studentUrl).setValue(studUrl);
    }
    
    pasteColsBCD_FromDevToStud_(devId, studId);
    
    const finalStudUrl = `https://docs.google.com/spreadsheets/d/${studId}/edit`;
    showLink_('STUDENT –≥–æ—Ç–æ–≤ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã B:D –∏–∑ DEV)', finalStudUrl, '–ü–ï–†–ï–ô–¢–ò –í STUD');
  } catch (e) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ DEV ‚Üí STUDENT: ' + (e.message || e));
  }
}


/***** === 1. –°–æ–∑–¥–∞—Ç—å DEV (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===*****/
function menuDevelopFactory()   { createDevOnly_AutoContext_('factory'); }
function menuDevelopNoFactory() { createDevOnly_AutoContext_('nofactory'); }
function createDevOnly_AutoContext_(mode) {
  const { sheet, row } = resolveRegistryRowContext_();
  const masterUrl = getMasterUrlByMode_(mode);
  if (!masterUrl) throw new Error(`–í REGISTRY –Ω–µ—Ç MASTER –¥–ª—è —Ä–µ–∂–∏–º–∞ ${mode}`);
  const masterId = fileIdFromUrl_(masterUrl);
  const order = String(sheet.getRange(row, COLS.order).getValue() || '').trim();
  if (!order) throw new Error('–í –∫–æ–ª–æ–Ω–∫–µ B (ID –∑–∞–∫–∞–∑–∞) –ø—É—Å—Ç–æ.');

  const a1 = sheet.getRange(row, COLS.aud1).getValue() || '';
  const e1 = sheet.getRange(row, COLS.exp1).getValue() || '';
  const a2 = sheet.getRange(row, COLS.aud2).getValue() || '';
  const e2 = sheet.getRange(row, COLS.exp2).getValue() || '';
  const a3 = sheet.getRange(row, COLS.aud3).getValue() || '';
  const e3 = sheet.getRange(row, COLS.exp3).getValue() || '';

  const folder = DriveApp.getFolderById(TARGET_FOLDER_ID);
  const devFile = DriveApp.getFileById(masterId).makeCopy(`DEV ‚Äî ${order}`, folder);
  const devId    = devFile.getId();

  applyAudienceExpert_(devId, {aud:[a1,a2,a3], exp:[e1,e2,e3]});
  clearAudienceColumnsIfMissing_(devId, {aud2:a2, aud3:a3});
  
  sheet.getRange(row, COLS.devUrl).setValue(`https://docs.google.com/spreadsheets/d/${devId}/edit`);
  
  const displayMode = mode === 'factory' ? '–§–∞–±—Ä–∏–∫–∞' : '–ù–µ –§–∞–±—Ä–∏–∫–∞';
  sheet.getRange(row, COLS.devMode).setValue(displayMode);

  showLink_('–ü–µ—Ä–µ–π–¥–∏ –≤ DEV –∏ –¥–∞–π –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å GPT.', `https://docs.google.com/spreadsheets/d/${devId}/edit`, '–ü–ï–†–ï–ô–¢–ò –í DEV');
}


/***** === –ë–´–°–¢–†–û–ï –†–ê–°–ö–†–´–¢–ò–ï –§–û–†–ú–£–õ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===*****/
function unfoldFormulasInColumns_(fileId, colIndexes) {
  const ss = SpreadsheetApp.openById(fileId);
  ss.getSheets().forEach(sh => {
    const lastRow = sh.getLastRow();
    if (lastRow < 1) return;

    colIndexes.forEach(col => {
      const range = sh.getRange(1, col, lastRow, 1);
      const values = range.getDisplayValues();
      let changed = false;
      for (let r = 0; r < values.length; r++) {
        const txt = values[r][0] || '';
        if (txt.startsWith(FORMULA_MARKER)) {
          values[r][0] = '=' + txt.substring(FORMULA_MARKER_LENGTH);
          changed = true;
        }
      }
      if (changed) {
        range.setFormulas(values);
      }
    });
  });
}


/***** === –ü–û–ú–û–©–ù–ò–ö –¥–ª—è –ø—Ä–æ—Ç—è–≥–∏–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ === *****/
function adjustCellReferences_(text, offset) {
  if (typeof text !== 'string' || !text || offset === 0) return text;
  
  return text.replace(/&([BCD])(\d+)&/gi, (match, col, numStr) => {
    const n = parseInt(numStr, 10);
    if (isNaN(n) || n <= 20) {
      return match;
    }
    const newRow = n + offset;
    return `&${col.toUpperCase()}${newRow}&`;
  });
}


/***** === 4. –û—Ç–¥–∞—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–æ–µ (DEV ‚Üí STUDENT) ===*****/
function menuDeliverExpanded_Final() {
  try {
    const { devId, studentId } = resolveDevStudentByContext_();
    const ssDev = SpreadsheetApp.openById(devId);
    const shDev = ssDev.getActiveSheet();
    const sheetName = shDev.getName();
    const ssStud = SpreadsheetApp.openById(studentId);
    const shStud = ssStud.getSheetByName(sheetName);
    if (!shStud) throw new Error(`–í —Ñ–∞–π–ª–µ STUDENT –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º "${sheetName}"`);
    const lastRow = shDev.getLastRow();
    if (lastRow < 1) return;
    const rangeDev = shDev.getRange(1, COL_E, lastRow, 4); // E:H
    const values = rangeDev.getDisplayValues(); 
    for (let r = 0; r < values.length; r++) {
      for (let c = 0; c < values[r].length; c++) {
        if (typeof values[r][c] === 'string' && values[r][c].startsWith(FORMULA_MARKER)) {
          values[r][c] = '';
        }
      }
    }
    shStud.getRange(1, COL_E, lastRow, 4).setValues(values);
    SpreadsheetApp.getUi().alert('‚úÖ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ –∏–∑ DEV (E:H) –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ STUDENT. –Ø—á–µ–π–∫–∏ —Å @@= –æ—á–∏—â–µ–Ω—ã.');
  } catch (e) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ [4. –û—Ç–¥–∞—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–æ–µ]: ' + (e.message || e));
  }
}

/***** === –£–¢–ò–õ–ò–¢–ê: –§–æ—Ä–º—É–ª—ã ‚áÑ –¢–µ–∫—Å—Ç (—Å @@=) ===*****/
function toggleFormulasOnSelection() {
  const range = SpreadsheetApp.getActiveRange();
  if (!range) { SpreadsheetApp.getUi().alert('–í—ã–¥–µ–ª–∏—Ç–µ —è—á–µ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.'); return; }
  const disp = range.getDisplayValues();
  const forms = range.getFormulas();
  for (let r=0;r<range.getNumRows();r++){
    for (let c=0;c<range.getNumColumns();c++){
      const cell = range.getCell(r+1,c+1);
      const f = forms[r][c]||'';
      const d = disp[r][c]||'';
      if (f.startsWith('=')) cell.setValue(FORMULA_MARKER + f.substring(1));
      else if (d.startsWith(FORMULA_MARKER)) cell.setFormula('=' + d.substring(FORMULA_MARKER_LENGTH));
    }
  }
}

/***** === 5. –¢–µ–ª–µ—Å—É—Ñ–ª—ë—Ä === *****/
function menuTeleprompter_InPlace() {
  try {
    const { devId, studentId } = resolveDevStudentByContext_();
    const shStud = SpreadsheetApp.openById(studentId).getActiveSheet();
    const ssDev  = SpreadsheetApp.openById(devId);
    const shDev  = ssDev.getSheetByName(shStud.getName()) || ssDev.insertSheet(shStud.getName());
    const picked=[];
    for(let r=2;r<=shStud.getLastRow();r++){
      const e=shStud.getRange(r,COL_E).getValue()||'';
      const f=shStud.getRange(r,COL_F).getValue()||'';
      const g=shStud.getRange(r,COL_G).getValue()||'';
      const txt=String(e||f||g).trim();
      if(txt) picked.push({rowIndex:r,B:txt});
    }
    if(!picked.length){ SpreadsheetApp.getUi().alert('–ù–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ–ª–µ—Å—É—Ñ–ª—ë—Ä–∞'); return; }
    picked.forEach(pr=>{
      ensureRowsAndCols_(shDev,pr.rowIndex,COL_H);
      shDev.getRange(pr.rowIndex,COL_B).setValue(pr.B);
      shDev.getRange(pr.rowIndex,COL_H).setFormula(FORMULA_MARKER+'GPT(...)');
      Utilities.sleep(SLEEP_MS);
      const vH=shDev.getRange(pr.rowIndex,COL_H).getValue();
      shStud.getRange(pr.rowIndex,COL_B).setValue(pr.B);
      shStud.getRange(pr.rowIndex,COL_H).setValue(vH);
    });
    SpreadsheetApp.getUi().alert('–¢–µ–ª–µ—Å—É—Ñ–ª—ë—Ä –≥–æ—Ç–æ–≤');
  } catch(e){ SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ —Ç–µ–ª–µ—Å—É—Ñ–ª—ë—Ä: '+(e.message||e)); }
}

/***** === –ü–û–ú–û–©–ù–ò–ö–ò –ò –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò ===*****/

function pasteColsBCD_FromDevToStud_(devId, studId) {
  const srcSS = SpreadsheetApp.openById(devId);
  const dstSS = SpreadsheetApp.openById(studId);
  const src = srcSS.getSheets()[0];
  const dst = dstSS.getSheets()[0];
  if (!src.getLastRow()) return;
  const rows = src.getLastRow();
  
  ensureRowsAndCols_(dst, rows, 4); 

  const sourceRange = src.getRange(1, COL_B, rows, 3); // B:D
  const destinationRange = dst.getRange(1, COL_B, rows, 3);
  
  const values = sourceRange.getValues();
  destinationRange.setValues(values);
}

/***** === new code ===*****/


function explodeNumberedListToRows() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const activeRange = sheet.getActiveRange();
    
    if (!activeRange || activeRange.getNumRows() !== 1 || activeRange.getNumColumns() !== 1) {
      throw new Error('–í—ã–±–µ—Ä–∏—Ç–µ –û–î–ù–£ —è—á–µ–π–∫—É —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º');
    }

    const cell = activeRange;
    const cellValue = cell.getDisplayValue();
    const row = cell.getRow();
    const col = cell.getColumn();

    if (!cellValue) {
      throw new Error('–í—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è');
    }

    const leftCellCol = col - 1; // –°—Ç–æ–ª–±–µ—Ü —Å–ª–µ–≤–∞ –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ
    if (leftCellCol < 1) {
      throw new Error('–ù–µ—Ç —è—á–µ–π–∫–∏ —Å–ª–µ–≤–∞ –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π');
    }
    const leftCell = sheet.getRange(row, leftCellCol);
    const leftCellValue = leftCell.getDisplayValue();
    const hasOtberite = leftCellValue.toLowerCase().includes('–æ—Ç–±–µ—Ä–∏—Ç–µ');

    // –ü–∞—Ä—Å–∏–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    const items = parseNumberedList_(cellValue);
    
    if (items.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ —è—á–µ–π–∫–µ');
    }

    let startRow = row + 1; // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

    // –ï—Å–ª–∏ –µ—Å—Ç—å "–æ—Ç–±–µ—Ä–∏—Ç–µ" —Å–ª–µ–≤–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (hasOtberite) {
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ù–ò–ñ–ï –∏—Å—Ö–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
      sheet.insertRowsAfter(row, items.length);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç "–æ—Ç–±–µ—Ä–∏—Ç–µ" - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
      const lastRow = sheet.getLastRow();
      const availableRows = lastRow - row;
      
      if (availableRows < items.length) {
        // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
        const rowsToAdd = items.length - availableRows;
        sheet.insertRowsAfter(lastRow, rowsToAdd);
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ù–ò–ñ–ï –∏—Å—Ö–æ–¥–Ω–æ–π
    for (let i = 0; i < items.length; i++) {
      sheet.getRange(startRow + i, col).setValue(items[i]);
    }

    SpreadsheetApp.getUi().alert(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${items.length} —Å—Ç—Ä–æ–∫ –Ω–∏–∂–µ${hasOtberite ? ' (—Å –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏)' : ''}`);

  } catch (error) {
    SpreadsheetApp.getUi().alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

function parseNumberedList_(text) {
  const cleanedText = String(text || '')
    .replace(/\r\n?/g, '\n')
    .replace(/\u00A0/g, ' ')
    .trim();

  if (!cleanedText) return [];

  const items = [];
  const lines = cleanedText.split('\n');
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    if (!trimmedLine) continue;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ "–æ—Ç–±–µ—Ä–∏—Ç–µ" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    if (trimmedLine.toLowerCase().includes('–æ—Ç–±–µ—Ä–∏—Ç–µ')) {
      items.push(trimmedLine);
    }
    // –ò–õ–ò –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    else {
      const match = trimmedLine.match(/^\s*(\d{1,2})[\.\)]\s*(.+)$/);
      if (match) {
        items.push(match[2].trim());
      }
    }
  }

  return items;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
function showLogsAndSuccess_(logs, sourceType, destinationType, url, numRows, numCols) {
  const logText = logs.join('<br>');
  
  const html = HtmlService.createHtmlOutput(
    `<div style="font:14px/1.4 system-ui,Arial;padding:20px;max-height:400px;overflow-y:auto;">
       <div style="background:#d4edda;color:#155724;padding:15px;border-radius:8px;margin-bottom:15px;">
         <strong>‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</strong><br>
         üìä ${numRows}√ó${numCols} —è—á–µ–µ–∫<br>
         üì§ ${sourceType} ‚Üí ${destinationType}
       </div>
       <div style="background:#f8f9fa;padding:15px;border-radius:8px;border:1px solid #ddd;">
         <strong>–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong><br>
         <div style="margin-top:10px;font-family:monospace;font-size:12px;">
           ${logText}
         </div>
       </div>
       <div style="margin-top:15px;text-align:center;">
         <a href="${url}" target="_blank"
            style="display:inline-block;padding:10px 20px;background:#1a73e8;color:#fff;border-radius:6px;text-decoration:none;">
           üìÇ –û—Ç–∫—Ä—ã—Ç—å ${destinationType}
         </a>
       </div>
     </div>`
  ).setWidth(600).setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
function showLogsAndError_(logs, errorMessage) {
  const logText = logs.join('<br>');
  
  const html = HtmlService.createHtmlOutput(
    `<div style="font:14px/1.4 system-ui,Arial;padding:20px;max-height:400px;overflow-y:auto;">
       <div style="background:#f8d7da;color:#721c24;padding:15px;border-radius:8px;margin-bottom:15px;">
         <strong>‚ùå –û—à–∏–±–∫–∞:</strong> ${errorMessage}
       </div>
       <div style="background:#f8f9fa;padding:15px;border-radius:8px;border:1px solid #ddd;">
         <strong>–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong><br>
         <div style="margin-top:10px;font-family:monospace;font-size:12px;">
           ${logText}
         </div>
       </div>
       <div style="margin-top:15px;text-align:center;">
         <button onclick="google.script.host.close()"
                 style="padding:8px 16px;background:#6c757d;color:#fff;border:none;border-radius:6px;cursor:pointer;">
           –ó–∞–∫—Ä—ã—Ç—å
         </button>
       </div>
     </div>`
  ).setWidth(600).setHeight(500);
  
  SpreadsheetApp.getUi().showModalDialog(html, '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function extractOrderIdFromFileName_(name) {
  if (!name) return '';
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  const parts1 = name.split('‚Äî').map(s => s.trim()); // –î–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
  const parts2 = name.split('-').map(s => s.trim());  // –î–µ—Ñ–∏—Å
  const parts3 = name.split('‚Äì').map(s => s.trim());  // –ö–æ—Ä–æ—Ç–∫–æ–µ —Ç–∏—Ä–µ
  
  let orderId = '';
  if (parts1.length >= 2) orderId = parts1[1];
  else if (parts2.length >= 2) orderId = parts2[1]; 
  else if (parts3.length >= 2) orderId = parts3[1];
  
  // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
  orderId = orderId.replace(/[^0-9]/g, '');
  
  return orderId;
}

/***** === new code ===*****/

function pasteSelectedValues_Bidirectional() {
  try {
    const currentFile = SpreadsheetApp.getActive();
    const currentFileName = currentFile.getName();
    const currentSheet = currentFile.getActiveSheet(); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const currentSheetName = currentSheet.getName(); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏

    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const orderId = extractOrderIdFromFileName_(currentFileName);
    if (!orderId) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∑–∞–∫–∞–∑–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    let destinationName, isToStudent;
    if (/^DEV\s‚Äî\s/i.test(currentFileName)) {
      destinationName = `STUDENT ‚Äî ${orderId}`;
      isToStudent = true;
    } else if (/^STUDENT\s‚Äî\s/i.test(currentFileName)) {
      destinationName = `DEV ‚Äî ${orderId}`;
      isToStudent = false;
    } else {
      throw new Error('–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "DEV ‚Äî " –∏–ª–∏ "STUDENT ‚Äî "');
    }

    // –ò—â–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Ñ–∞–π–ª
    const files = DriveApp.getFilesByName(destinationName);
    if (!files.hasNext()) throw new Error(`–§–∞–π–ª "${destinationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    
    const destinationId = files.next().getId();
    const dstSS = SpreadsheetApp.openById(destinationId);

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º –≤ —Ü–µ–ª–µ–≤–æ–º —Ñ–∞–π–ª–µ
    let dstSheet;
    try {
      dstSheet = dstSS.getSheetByName(currentSheetName);
      if (!dstSheet) {
        // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ—ë
        dstSheet = dstSS.insertSheet(currentSheetName);
        console.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞: ${currentSheetName}`);
      }
    } catch (e) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∫–ª–∞–¥–∫–æ–π "${currentSheetName}": ${e.message}`);
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const activeRange = currentSheet.getActiveRange();
    if (!activeRange) throw new Error('–ù–µ –≤—ã–¥–µ–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ
    const destinationRange = dstSheet.getRange(
      activeRange.getRow(),
      activeRange.getColumn(),
      activeRange.getNumRows(),
      activeRange.getNumColumns()
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏/–∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ensureRowsAndCols_(dstSheet, 
      activeRange.getRow() + activeRange.getNumRows() - 1,
      activeRange.getColumn() + activeRange.getNumColumns() - 1
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const values = activeRange.getValues();
    const formulas = activeRange.getFormulas();
    const displayValues = activeRange.getDisplayValues();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const dataToPaste = [];
    for (let i = 0; i < values.length; i++) {
      const row = [];
      for (let j = 0; j < values[i].length; j++) {
        if (isToStudent) {
          // –í STUDENT –∫–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑ —Ñ–æ—Ä–º—É–ª)
          row.push(values[i][j]);
        } else {
          // –í DEV –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
          const hasFormula = formulas[i][j] && formulas[i][j] !== '';
          if (hasFormula) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            row.push(formulas[i][j]);
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º—É–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            // –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —á–∏—Å–ª–æ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            const displayVal = displayValues[i][j];
            const originalVal = values[i][j];
            
            // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä "123.0")
            if (typeof originalVal === 'number' && String(originalVal) === displayVal) {
              row.push(originalVal);
            } else {
              row.push(originalVal);
            }
          }
        }
      }
      dataToPaste.push(row);
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    try {
      if (isToStudent) {
        // –í STUDENT - —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è
        destinationRange.setValues(dataToPaste);
      } else {
        // –í DEV - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
        intelligentPaste_(destinationRange, dataToPaste, formulas);
      }
    } catch (e) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${e.message}`);
    }

    const direction = isToStudent ? 'DEV ‚Üí STUDENT' : 'STUDENT ‚Üí DEV';
    const copyType = isToStudent ? '—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è' : '–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—É–ª—ã';
    
    showLink_(
      `‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${activeRange.getNumRows()}√ó${activeRange.getNumColumns()} —è—á–µ–µ–∫\n` +
      `–í–∫–ª–∞–¥–∫–∞: ${currentSheetName}\n` +
      `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}\n` +
      `–¢–∏–ø: ${copyType}`,
      dstSS.getUrl(),
      '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª'
    );

  } catch (error) {
    SpreadsheetApp.getUi().alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
function intelligentPaste_(destinationRange, dataToPaste, originalFormulas) {
  const hasAnyFormula = originalFormulas.some(row => 
    row.some(cell => cell && cell !== '')
  );
  
  if (hasAnyFormula) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã, –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ä–º—É–ª—ã
    try {
      destinationRange.setFormulas(dataToPaste);
      return;
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è:', e);
    }
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
  const valuesOnly = dataToPaste.map(row => 
    row.map(cell => {
      // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É –∫–∞–∫ —Ç–µ–∫—Å—Ç (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å =), 
      // –Ω–æ —ç—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∞—è —Ñ–æ—Ä–º—É–ª–∞, —É–±–∏—Ä–∞–µ–º =
      if (typeof cell === 'string' && cell.startsWith('=') && 
          !originalFormulas.flat().includes(cell)) {
        return cell.substring(1);
      }
      return cell;
    })
  );
  
  destinationRange.setValues(valuesOnly);
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID
function extractOrderIdFromFileName_(name) {
  if (!name) return '';
  const parts = name.split('‚Äî').map(s => s.trim());
  return parts.length >= 2 ? parts[1].replace(/[^0-9]/g, '') : '';
}

/***** === end new code ===*****/


function showLink_(text, url, btn) {
  const html = HtmlService.createHtmlOutput(
    `<div style="font:14px/1.4 system-ui,Arial;padding:12px">
       <div style="margin-bottom:10px">${text}</div>
       <a href="${url}" target="_blank"
          style="display:inline-block;padding:8px 12px;background:#1a73e8;color:#fff;border-radius:6px;text-decoration:none;">
         ${btn || '–ü–µ—Ä–µ–π—Ç–∏'}
       </a>
     </div>`
  ).setWidth(420).setHeight(140);
  SpreadsheetApp.getUi().showModalDialog(html, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
}

function copyRowFormat_(sheet, srcRow, dstStartRow, count) {
    if (count <= 0) return;
    const maxCols = sheet.getMaxColumns();
    const sourceRange = sheet.getRange(srcRow, 1, 1, maxCols);
    for (let i = 0; i < count; i++) {
        const destRange = sheet.getRange(dstStartRow + i, 1, 1, maxCols);
        sourceRange.copyTo(destRange, { formatOnly: true });
    }
}

function ensureRowsAndCols_(sh, minRow, minCol){
  const maxR = sh.getMaxRows();
  if (maxR < minRow) sh.insertRowsAfter(maxR, minRow - maxR);
  const maxC = sh.getMaxColumns();
  if (maxC < minCol) sh.insertColumnsAfter(maxC, minCol - maxC);
}

function applyAudienceExpert_(fileId,{aud,exp}){
  const ss=SpreadsheetApp.openById(fileId);
  ss.getSheets().forEach(sh=>{
    try{ sh.getRange('B1:D1').setValues([aud]); }catch(e){}
    try{ sh.getRange('B2:D2').setValues([exp]); }catch(e){}
  });
}

function clearAudienceColumnsIfMissing_(fileId,{aud2,aud3}){
  const ss=SpreadsheetApp.openById(fileId);
  ss.getSheets().forEach(sh=>{
    const rows = sh.getMaxRows();
    if(!aud2) sh.getRange(1,COL_C,rows,1).clearContent();
    if(!aud3) sh.getRange(1,COL_D,rows,1).clearContent();
  });
}

function resolveRegistryRowContext_() {
  let reg = SpreadsheetApp.getActive();
  let sheet = reg.getSheetByName(REG_SHEET);
  if (sheet) {
    const range = reg.getActiveRange();
    if (range) {
      const row = range.getRow();
      if (row>=START_ROW) return {reg, sheet, row};
    }
  }
  if (!REGISTRY_FILE_ID) throw new Error('–ù–µ –∑–∞–¥–∞–Ω REGISTRY_FILE_ID.');
  reg = SpreadsheetApp.openById(REGISTRY_FILE_ID);
  sheet = reg.getSheetByName(REG_SHEET);
  if (!sheet) throw new Error('–í —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ—Ç –ª–∏—Å—Ç–∞ REGISTRY.');
  const id = extractOrderIdFromFileName_(SpreadsheetApp.getActive().getName());
  if (!id) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.');
  const row = findRowByOrder_(sheet, id);
  if (row<START_ROW) throw new Error(`–í REGISTRY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å ID = ${id}.`);
  return {reg, sheet, row};
}

function isRowGrouped_(sheet, rowIndex) {
  try {
    const rowGroups = sheet.getRowGroups();
    
    for (const group of rowGroups) {
      const startRow = group.getControlIndex() + 1; 
      const numRows = group.getNumRows();
      const endRow = startRow + numRows - 1;
      
      if (rowIndex > startRow && rowIndex <= endRow) {
        return true;
      }
    }
    return false;
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:', e);
    return false;
  }
}

function resolveDevStudentByContext_() {
  const { sheet, row } = resolveRegistryRowContext_();
  let devUrl = String(sheet.getRange(row, COLS.devUrl).getValue() || '').trim();
  let studentUrl = String(sheet.getRange(row, COLS.studentUrl).getValue() || '').trim();
  const cur = SpreadsheetApp.getActive();
  const curId = cur.getId();
  const curName = cur.getName();
  const thisUrl = `https://docs.google.com/spreadsheets/d/${curId}/edit`;
  if (/^STUDENT\s‚Äî\s/i.test(curName)) {
    if (studentUrl !== thisUrl) {
      sheet.getRange(row, COLS.studentUrl).setValue(thisUrl);
      studentUrl = thisUrl;
    }
  }
  if (/^DEV\s‚Äî\s/i.test(curName)) {
    if (devUrl !== thisUrl) {
      sheet.getRange(row, COLS.devUrl).setValue(thisUrl);
      devUrl = thisUrl;
    }
  }
  if (!devUrl)      throw new Error('–í —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ—Ç DEV. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ ¬´1. –°–æ–∑–¥–∞—Ç—å DEV¬ª.');
  if (!studentUrl) throw new Error('–í —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ—Ç STUDENT. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ ¬´2. DEV ‚Üí STUDENT¬ª.');
  return { devId:fileIdFromUrl_(devUrl), studentId:fileIdFromUrl_(studentUrl) };
}

function getMasterUrlByMode_(mode) {
  const reg = SpreadsheetApp.openById(REGISTRY_FILE_ID).getSheetByName(REG_SHEET);
  if (!reg) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç REGISTRY.');
  const cell = (mode==='factory') ? REG_MASTER_FACTORY_CELL : REG_MASTER_NOFACT_CELL;
  return String(reg.getRange(cell).getValue()||'').trim();
}

function findRowByOrder_(sheet, orderId) {
  const rng = sheet.getRange(START_ROW, COLS.order, sheet.getLastRow() - START_ROW + 1, 1).getValues();
  for (let i=0;i<rng.length;i++) if (String(rng[i][0]).trim()===String(orderId).trim()) return START_ROW + i;
  return -1;
}

function extractOrderIdFromFileName_(name) {
  if (!name) return '';
  const parts = name.split('‚Äî').map(s=>s.trim());
  return parts.length>=2 ? parts[1] : '';
}

function fileIdFromUrl_(url) {
  const m = /\/d\/([a-zA-Z0-9\-_]+)/.exec(String(url)||'');
  if (!m) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å fileId –∏–∑ URL: '+url);
  return m[1];
}


function f1() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const range = sheet.getActiveRange();
    
    if (!range) {
      SpreadsheetApp.getUi().alert('–í—ã–¥–µ–ª–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.');
      return;
    }

    const formulas = range.getFormulas();
    let replacedCount = 0;

    for (let r = 0; r < formulas.length; r++) {
      for (let c = 0; c < formulas[r].length; c++) {
        const formula = formulas[r][c];
        
        if (formula && formula.toLowerCase().includes('gpt(')) {
          // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º IF(E$2=""; –ø–µ—Ä–µ–¥ GPT –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Ü–µ
          const newFormula = `=IF($C$7=""; ${formula.substring(1)}; "")`;
          
          const cell = range.getCell(r + 1, c + 1);
          cell.setFormula(newFormula);
          replacedCount++;
        }
      }
    }

    if (replacedCount > 0) {
      SpreadsheetApp.getUi().alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω IF –∫ ${replacedCount} —Ñ–æ—Ä–º—É–ª–∞–º GPT`);
    } else {
      SpreadsheetApp.getUi().alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º—É–ª —Å gpt( –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ');
    }

  } catch (e) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: ' + (e.message || e));
  }
}
function f2() {
  
}
function f3() {
  
}
function f4() {
  
}
function f5() {
  
}
function f6() {
  
}
function f7() {
  
}
function f8() {
  
}
function f9() {
  
}
function f10() {
  
}
function f11() {
  
}
function f12() {
  
}
function f13() {
  
}
function f14() {
  
}
function f15() {
  
}
function collectSelectedRows_WithParsedLists_(shStud){
  const res = [];
  const last = shStud.getLastRow();
  if (last < 1) return res;

  const A = shStud.getRange(1, COL_A, last, 1).getDisplayValues().map(r=>String(r[0]||''));
  const B = shStud.getRange(1, COL_B, last, 1).getDisplayValues().map(r=>String(r[0]||''));
  const C = shStud.getRange(1, COL_C, last, 1).getDisplayValues().map(r=>String(r[0]||''));
  const D = shStud.getRange(1, COL_D, last, 1).getDisplayValues().map(r=>String(r[0]||''));

  for (let r = 1; r <= last; r++){
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (isRowGrouped_(shStud, r)) {
      continue;
    }

    const aClean = (A[r-1] || '').replace(/[\u200B\u200C\u200D\uFEFF]/g, '').replace(/\u00A0/g, ' ').trim();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å—Ç—Ä–æ–∫–∏ —Å ">"
    const hasSelectMarker = aClean.includes(MARK_SELECT);
    if (!hasSelectMarker) {
      // –î–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ ">" - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (k=1)
      const meta = { 
        k: 1, 
        B: [B[r-1].trim()], 
        C: [C[r-1].trim()], 
        D: [D[r-1].trim()] 
      };
      res.push({ rowIndex: r, meta, hasSelectMarker: false });
      continue;
    }

    // –î–ª—è —Å—Ç—Ä–æ–∫ —Å ">" - —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏
    const listB = parseNumberedList_(B[r-1]);
    const listC = parseNumberedList_(C[r-1]);
    const listD = parseNumberedList_(D[r-1]);
    const valB = listB.length ? listB : (B[r-1].trim() ? [B[r-1].trim()] : []);
    const valC = listC.length ? listC : (C[r-1].trim() ? [C[r-1].trim()] : []);
    const valD = listD.length ? listD : (D[r-1].trim() ? [D[r-1].trim()] : []);
    const k = Math.max(valB.length, valC.length, valD.length, 1);
    
    const meta = { k, B: valB, C: valC, D: valD };
    res.push({ rowIndex: r, meta, hasSelectMarker: true });
  }
  return res;
}